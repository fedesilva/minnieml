scala> rewrite("""
     | type XInt = Int64;                                                                                                                                                                                                                                                                                        | let x: XInt = 2 + 2;                                                                                                                                                                                                                                                                                      | """, true, trues parsed module:                                                                                                                                                                                                                                                                                               Public Module Anon                                                                                                                                                                                                                                                                                            TypeAlias prot XInt -> Int64                                                                                                                                                                                                                                                                                Bnd prot x                                                                                                                                                                                                                                                                                                      Expr                                                                                                                                                                                                                                                                                                          LiteralInt 2                                                                                                                                                                                                                                                                                                Ref +                                                                                                                                                                                                                                                                                                         candidates: []                                                                                                                                                                                                                                                                                            LiteralIntynthetic members injected:
     Public Module Anon
      BinOpDef pub *
        param1: a                                                                                                                                                                                                                                                                                                   param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub /
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub +
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub -
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub ==
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub !=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub and
        param1: a
        param2: b
        precedence: 40
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub or
        param1: a
        param2: b
        precedence: 30
        associativity: Left
          Expr
            NativeImpl
      UnaryOpDef prot -
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot +
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot not
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      TypeDef prot Int64 @native
      TypeDef prot Int32 @native
      TypeDef prot Int16 @native
      TypeDef prot Int8 @native
      TypeDef prot Float @native
      TypeDef prot Double @native
      TypeDef prot Bool @native
      TypeDef prot CharPtr @native
      TypeDef prot String @native
      TypeDef prot SizeT @native
      TypeDef prot Char @native
      TypeDef prot Unit @native
      TypeAlias prot Int -> Int64
      TypeAlias prot Byte -> Int8
      TypeAlias prot Word -> Int8
      TypeAlias prot XInt -> Int64
      Bnd prot x
          Expr
            LiteralInt 2
            Ref +
              candidates: []
            LiteralInt 2
--------------------------------------------------------------------------------


 Checking Parser Errors:
     Public Module Anon
      BinOpDef pub *
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub /
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub +
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub -
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub ==
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub !=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub and
        param1: a
        param2: b
        precedence: 40
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub or
        param1: a
        param2: b
        precedence: 30
        associativity: Left
          Expr
            NativeImpl
      UnaryOpDef prot -
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot +
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot not
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      TypeDef prot Int64 @native
      TypeDef prot Int32 @native
      TypeDef prot Int16 @native
      TypeDef prot Int8 @native
      TypeDef prot Float @native
      TypeDef prot Double @native
      TypeDef prot Bool @native
      TypeDef prot CharPtr @native
      TypeDef prot String @native
      TypeDef prot SizeT @native
      TypeDef prot Char @native
      TypeDef prot Unit @native
      TypeAlias prot Int -> Int64
      TypeAlias prot Byte -> Int8
      TypeAlias prot Word -> Int8
      TypeAlias prot XInt -> Int64
      Bnd prot x
          Expr
            LiteralInt 2
            Ref +
              candidates: []
            LiteralInt 2
--------------------------------------------------------------------------------


 Type Resolver phase:
     Public Module Anon
      BinOpDef pub *
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub /
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub +
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub -
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub ==
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub !=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub and
        param1: a
        param2: b
        precedence: 40
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub or
        param1: a
        param2: b
        precedence: 30
        associativity: Left
          Expr
            NativeImpl
      UnaryOpDef prot -
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot +
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot not
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      TypeDef prot Int64 @native
      TypeDef prot Int32 @native
      TypeDef prot Int16 @native
      TypeDef prot Int8 @native
      TypeDef prot Float @native
      TypeDef prot Double @native
      TypeDef prot Bool @native
      TypeDef prot CharPtr @native
      TypeDef prot String @native
      TypeDef prot SizeT @native
      TypeDef prot Char @native
      TypeDef prot Unit @native
      TypeAlias prot Int -> Int64
      TypeAlias prot Byte -> Int8
      TypeAlias prot Word -> Int8
      TypeAlias prot XInt -> Int64
      Bnd prot x
          Expr
            LiteralInt 2
            Ref +
              candidates: []
            LiteralInt 2
--------------------------------------------------------------------------------


 Reference Resolver phase:
     Public Module Anon
      BinOpDef pub *
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub /
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub +
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub -
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub ==
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub !=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub and
        param1: a
        param2: b
        precedence: 40
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub or
        param1: a
        param2: b
        precedence: 30
        associativity: Left
          Expr
            NativeImpl
      UnaryOpDef prot -
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot +
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot not
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      TypeDef prot Int64 @native
      TypeDef prot Int32 @native
      TypeDef prot Int16 @native
      TypeDef prot Int8 @native
      TypeDef prot Float @native
      TypeDef prot Double @native
      TypeDef prot Bool @native
      TypeDef prot CharPtr @native
      TypeDef prot String @native
      TypeDef prot SizeT @native
      TypeDef prot Char @native
      TypeDef prot Unit @native
      TypeAlias prot Int -> Int64
      TypeAlias prot Byte -> Int8
      TypeAlias prot Word -> Int8
      TypeAlias prot XInt -> Int64
      Bnd prot x
          Expr
            LiteralInt 2
            Ref +
              candidates: [BinOpDef +, UnaryOpDef +]
            LiteralInt 2
--------------------------------------------------------------------------------


 Expression Rewriting phase:
     Public Module Anon
      BinOpDef pub *
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub /
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub +
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub -
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub ==
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub !=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub and
        param1: a
        param2: b
        precedence: 40
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub or
        param1: a
        param2: b
        precedence: 30
        associativity: Left
          Expr
            NativeImpl
      UnaryOpDef prot -
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot +
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot not
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      TypeDef prot Int64 @native
      TypeDef prot Int32 @native
      TypeDef prot Int16 @native
      TypeDef prot Int8 @native
      TypeDef prot Float @native
      TypeDef prot Double @native
      TypeDef prot Bool @native
      TypeDef prot CharPtr @native
      TypeDef prot String @native
      TypeDef prot SizeT @native
      TypeDef prot Char @native
      TypeDef prot Unit @native
      TypeAlias prot Int -> Int64
      TypeAlias prot Byte -> Int8
      TypeAlias prot Word -> Int8
      TypeAlias prot XInt -> Int64
      Bnd prot x
          Expr
            App
              fn:
                App
                  fn:
                    Ref +
                      resolvedAs: BinOpDef +
                      candidates: [BinOpDef +, UnaryOpDef +]
                  arg:
                    Expr
                      LiteralInt 2
              arg:
                Expr
                  LiteralInt 2
--------------------------------------------------------------------------------


 Simplifier phase:
     Public Module Anon
      BinOpDef pub *
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub /
        param1: a
        param2: b
        precedence: 80
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub +
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub -
        param1: a
        param2: b
        precedence: 60
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub ==
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub !=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub <=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub >=
        param1: a
        param2: b
        precedence: 50
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub and
        param1: a
        param2: b
        precedence: 40
        associativity: Left
          Expr
            NativeImpl
      BinOpDef pub or
        param1: a
        param2: b
        precedence: 30
        associativity: Left
          Expr
            NativeImpl
      UnaryOpDef prot -
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot +
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      UnaryOpDef prot not
        param: a
        precedence: 95
        associativity: Right
          Expr
            NativeImpl
      TypeDef prot Int64 @native
      TypeDef prot Int32 @native
      TypeDef prot Int16 @native
      TypeDef prot Int8 @native
      TypeDef prot Float @native
      TypeDef prot Double @native
      TypeDef prot Bool @native
      TypeDef prot CharPtr @native
      TypeDef prot String @native
      TypeDef prot SizeT @native
      TypeDef prot Char @native
      TypeDef prot Unit @native
      TypeAlias prot Int -> Int64
      TypeAlias prot Byte -> Int8
      TypeAlias prot Word -> Int8
      TypeAlias prot XInt -> Int64
      Bnd prot x
          Expr
            App
              fn:
                App
                  fn:
                    Ref +
                      resolvedAs: BinOpDef +
                      candidates: [BinOpDef +, UnaryOpDef +]
                  arg:
                    Expr
                      LiteralInt 2
              arg:
                Expr
                  LiteralInt 2
--------------------------------------------------------------------------------
Type Checker phase
    Public Module Anon
      BinOpDef pub *
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef Int => TypeAlias(Int)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 80
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub /
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef Int => TypeAlias(Int)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 80
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub +
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef Int => TypeAlias(Int)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 60
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub -
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef Int => TypeAlias(Int)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 60
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub ==
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 50
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub !=
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 50
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub <
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 50
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub >
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 50
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub <=
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 50
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub >=
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        param2: b
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 50
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub and
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Bool => TypeDef(Bool)
            typeAsc: TypeRef Bool => TypeDef(Bool)
        param2: b
            typeSpec: TypeRef Bool => TypeDef(Bool)
            typeAsc: TypeRef Bool => TypeDef(Bool)
        precedence: 40
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      BinOpDef pub or
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param1: a
            typeSpec: TypeRef Bool => TypeDef(Bool)
            typeAsc: TypeRef Bool => TypeDef(Bool)
        param2: b
            typeSpec: TypeRef Bool => TypeDef(Bool)
            typeAsc: TypeRef Bool => TypeDef(Bool)
        precedence: 30
        associativity: Left
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      UnaryOpDef prot -
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef Int => TypeAlias(Int)
        param: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 95
        associativity: Right
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      UnaryOpDef prot +
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef Int => TypeAlias(Int)
        param: a
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: TypeRef Int => TypeAlias(Int)
        precedence: 95
        associativity: Right
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      UnaryOpDef prot not
        typeSpec: TypeRef Bool => TypeDef(Bool)
        typeAsc: TypeRef Bool => TypeDef(Bool)
        param: a
            typeSpec: TypeRef Bool => TypeDef(Bool)
            typeAsc: TypeRef Bool => TypeDef(Bool)
        precedence: 95
        associativity: Right
          Expr
            typeSpec: None
            typeAsc: None
            NativeImpl
              typeSpec: None
              typeAsc: None
      TypeDef prot Int64 @native
        typeSpec: @native:i64
        typeAsc: None
      TypeDef prot Int32 @native
        typeSpec: @native:i32
        typeAsc: None
      TypeDef prot Int16 @native
        typeSpec: @native:i16
        typeAsc: None
      TypeDef prot Int8 @native
        typeSpec: @native:i8
        typeAsc: None
      TypeDef prot Float @native
        typeSpec: @native:float
        typeAsc: None
      TypeDef prot Double @native
        typeSpec: @native:double
        typeAsc: None
      TypeDef prot Bool @native
        typeSpec: @native:i1
        typeAsc: None
      TypeDef prot CharPtr @native
        typeSpec: @native:*i8
        typeAsc: None
      TypeDef prot String @native
        typeSpec: @native:{
          length: TypeRef Int64 => TypeDef(Int64),
          data: TypeRef CharPtr => TypeDef(CharPtr)
        }
        typeAsc: None
      TypeDef prot SizeT @native
        typeSpec: @native:i64
        typeAsc: None
      TypeDef prot Char @native
        typeSpec: @native:i8
        typeAsc: None
      TypeDef prot Unit @native
        typeSpec: @native:void
        typeAsc: None
      TypeAlias prot Int -> Int64
        typeSpec: TypeRef Int64 => TypeDef(Int64)
        typeAsc: None
        typeRef: TypeRef Int64 => TypeDef(Int64)
      TypeAlias prot Byte -> Int8
        typeSpec: TypeRef Int8 => TypeDef(Int8)
        typeAsc: None
        typeRef: TypeRef Int8 => TypeDef(Int8)
      TypeAlias prot Word -> Int8
        typeSpec: TypeRef Int8 => TypeDef(Int8)
        typeAsc: None
        typeRef: TypeRef Int8 => TypeDef(Int8)
      TypeAlias prot XInt -> Int64
        typeSpec: TypeRef Int64 => TypeDef(Int64)
        typeAsc: None
        typeRef: TypeRef Int64 => TypeDef(Int64)
      Bnd prot x
        typeSpec: TypeRef Int => TypeAlias(Int)
        typeAsc: TypeRef XInt => TypeAlias(XInt)
          Expr
            typeSpec: TypeRef Int => TypeAlias(Int)
            typeAsc: None
            App
              typeSpec: TypeRef Int => TypeAlias(Int)
              typeAsc: None
              fn:
                App
                  typeSpec: TypeRef Int => TypeAlias(Int)
                  typeAsc: None
                  fn:
                    Ref +
                      typeSpec: TypeRef Int => TypeAlias(Int)
                      typeAsc: None
                      resolvedAs: BinOpDef +
                      candidates: [BinOpDef +, UnaryOpDef +]
                  arg:
                    Expr
                      typeSpec: TypeRef Int => TypeAlias(Int)
                      typeAsc: None
                      LiteralInt 2
              arg:
                Expr
                  typeSpec: TypeRef Int => TypeAlias(Int)
                  typeAsc: None
                  LiteralInt 2
--------------------------------------------------------------------------------
Original source
================================================================================

type XInt = Int64;
let x: XInt = 2 + 2;

================================================================================
No errors
--------------------------------------------------------------------------------
SemanticPhaseState(Module(SrcSpan(SrcPoint(0,2,1),SrcPoint(3,21,41)),Anon,Public,List(BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),*,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),80,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(mul))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),/,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),80,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(sdiv))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),+,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),60,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(add))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),-,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),60,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(sub))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),==,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),50,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(icmp_eq))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),!=,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),50,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(icmp_ne))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),<,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),50,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(icmp_slt))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),>,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),50,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(icmp_sgt))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),<=,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),50,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(icmp_sle))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),>=,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),50,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(icmp_sge))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),and,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None),40,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(and))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),or,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None),30,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(or))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), UnaryOpDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),-,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),95,Right,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(neg))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), UnaryOpDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),+,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),95,Right,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(nop))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), UnaryOpDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),not,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None),95,Right,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(not))),None,None),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None)))),None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int32,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i32)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int16,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i16)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Float,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),float)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Double,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),double)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Bool,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i1)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),CharPtr,Some(NativePointer(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),String,Some(NativeStruct(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Map(length -> TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))), data -> TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),CharPtr,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),CharPtr,Some(NativePointer(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None)))))),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),SizeT,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Char,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None), TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Unit,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),void)),None,None), TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None), TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Byte,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None)))),None,None), TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Word,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int8,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i8)),None,None)))),None,None), TypeAlias(Protected,SrcSpan(SrcPoint(0,2,1),SrcPoint(2,19,20)),XInt,TypeRef(SrcSpan(SrcPoint(2,13,13),SrcPoint(2,18,18)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(2,13,13),SrcPoint(2,18,18)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None), Bnd(Protected,SrcSpan(SrcPoint(3,5,24),SrcPoint(3,21,41)),x,Expr(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,20,39)),List(App(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,20,39)),App(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,20,39)),Ref(SrcSpan(SrcPoint(3,17,36),SrcPoint(3,19,38)),+,None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),+,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),60,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(add))),None,None),None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None)),List(BinOpDef(Public,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),+,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),b,None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),60,Left,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(add))),None,None),None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None), UnaryOpDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),+,FnParam(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),a,None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None),95,Right,Expr(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),List(NativeImpl(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),None,None,Some(nop))),None,None),None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),None))),Expr(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,16,35)),List(LiteralInt(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,16,35)),2,Some(TypeRef(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,16,35)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None)))),None)),None,Some(TypeRef(SrcSpan(SrcPoint(3,15,34),SrcPoint(3,16,35)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None))))),None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None))))),Expr(SrcSpan(SrcPoint(3,19,38),SrcPoint(3,20,39)),List(LiteralInt(SrcSpan(SrcPoint(3,19,38),SrcPoint(3,20,39)),2,Some(TypeRef(SrcSpan(SrcPoint(3,19,38),SrcPoint(3,20,39)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None)))),None)),None,Some(TypeRef(SrcSpan(SrcPoint(3,19,38),SrcPoint(3,20,39)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None))))),None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))))),None,Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None))))),Some(TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int,TypeRef(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,None),None,None,None)))),Some(TypeRef(SrcSpan(SrcPoint(3,8,27),SrcPoint(3,13,32)),XInt,Some(TypeAlias(Protected,SrcSpan(SrcPoint(0,2,1),SrcPoint(2,19,20)),XInt,TypeRef(SrcSpan(SrcPoint(2,13,13),SrcPoint(2,18,18)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None))),Some(TypeRef(SrcSpan(SrcPoint(2,13,13),SrcPoint(2,18,18)),Int64,Some(TypeDef(Protected,SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),Int64,Some(NativePrimitive(SrcSpan(SrcPoint(0,0,0),SrcPoint(0,0,0)),i64)),None,None)))),None,None)))),None)),true,None),Vector())
--------------------------------------------------------------------------------

scala>