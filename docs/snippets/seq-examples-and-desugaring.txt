# The following examples show the use of sequence literals  also called seq notation
# It allows us to define succintly  instances of Array (contiguous storage, fixed length)
# and manipulate them by using pattern matching
# The mechanism also allows for user defined types to be selectable for desugaring
#  as long as a canonical  instance of SequenceSugar is found for the type in question.
# More details are provided below.


# sequence literals are inferred and desugared to Array
# a1 :: Array Int
let a1 = [ 1 ]

# empty array is useless  if there is not type information
# empty array literal (Nothing is the bottom type)
# x0: [] Nothing
# or equivalently
# x0: Array Nothing
# inferring Nothing is a warning
# and nothing can be done with Nothing ( o_O )
# so this line fails if warnings are configured as fatal
#let x0 = []
# you need to use type ascription
# x0 : Array Int
let x0 : Array Int = []
# or use type sequence notation which is idiomatic.
# if you only provide an element type
# the container is Array
# x1: Array Int
let x1 = Int []
# here the container type is specified
# and the element type is inferred by its element type - a literal Int.
let x2 = List [ 1 ]

# sequences desugar to array
# but if an eligible type is inferred, it will be used.
let ns: List Int = [ 1 2 3 ]



#
#desugars to ns: List Int
let ns = List [ 1 2 3 ]

# x : Array String
let x = ["f" "e" "d" "e"]

# also x : Array String
# the ??? thing lets compilation continue without a body if types check. the type of ??? is Nothing (the bottom type)
let x : [] String = ???

# the cons ([::]) pattern match, takes the first element of the list and the tail.
fn matchList l =
  l match
    | []                -> "empty"
    | [a]               -> a
    | [a b]             -> a + b
    | [ head :: tail ]  -> a


#
# Desugaring
#
# the compiler can desugar typed  sequence literals
# of the form
# LinkedList [1 2 3]
# Vector [ "a" "b" "c" ]
# which would result respectively in types
# LinkedList Int
# Vector String
# since sequences always desugar to array
# the desugaring process first desugars the seq to an array
# then passes the array to the desugar function
# of the appropriate instance for a types
# the type 'T is the element type
protocol SeqDesugar 'F =
  desugar 'T: (Array 'T) -> ('F 'T)
;


(**
   rules of desugaring

 Trigger Clause:

  A sequence literal is used in an expression.

  Simple sequence Case:
    Simple sequence with literal elements
      The inferred type is Array 'T, where 'T is the type of the elements.

      Example: let xs = [1 2 3] (Desugars to Array Int).

  Inference Case:
    If the type of the elements can be inferred (ascription, flow, or unification):
      The type is Array 'I, where 'I is the inferred type.

      Example: let xs: Array Int = [] (Desugars to Array Int).
      Example: let ys = [] ++ [1, 2, 3] (Desugars to Array Int for both)


  Empty sequence with type annotation Case:

    The desugared type is Array 'T, where 'T is the type of the annotation.

    Example: let xs = [] Int (Desugars to Array Int).


  Type Constructor Reference with Sequence Case:
    If the type constructor refers to a type with an instance of SeqDesugar:
      The container type is the type with a SeqDesugar instance.
      Rules 1, 2 and 3 apply within the context of the Sequence type.

      Example: let xs = List [1 2 3] (Desugars to List Int).
      Example: let ys = Vector [1 2 3] (Desugars to Vector Int).
      Example: let zs = Vector Int [] (Desugars to Vector Int with an empty list).


   Untypeable Sequence in a Polymorphic Capable Scope Case:
    if an empty sequence or a sequence where the elements are not typeable
      and the usage happens within a polymorphic capable context



  Untypable Empty Sequence Case:
    If an empty sequence is encountered and the type of the element can't be inferred:
      The desugared type is Array Nothing.
      This raises a warning indicating an empty sequence with no type hint.
      The warning can be configured to result in a fatal compile error.

*)