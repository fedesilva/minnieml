# the following types are a sample of the standard library plus some use examples


# Maybe could be a type def
# `type Maybe 'T = 'T | ()`
# but enums are more flexible
# with an enum when you say One x, inference is as
# precise as can be for x.
# you know it is a Maybe 'T for whatever 'T.
# with a union type it will be frequently infered as
# either unit or the concrete type
# see usage below
enum Maybe 'T =
  | One: 'T
  | None

#puts Maybe members in the current scope
# to allow using them unqualified
# One instead of Maybe.One
use Maybe._

# empty :: Maybe 'T -> Boolean
fn empty x =
  x match
    | () -> true
    | _  -> false

# empty :: Maybe 'T -> Boolean
fn nonEmpty maybe =
  ! empty maybe

enum Result 'T 'E =
  | Ok: 'T
  | Err: 'E

# Semigroup represents an associative binary operation.
protocol Semigroup 'T =
  combine: 'T -> 'T -> 'T
;

# Monoid is a semigroup with an identity (zero) element.
protocol Monoid 'T <: Semigroup 'T =
  empty:  'T
;

# Functor represents a structure that can be mapped over.
protocol Functor 'F =
  map  'A 'B : ('A -> 'B) -> ('F 'A) -> ('F 'B)
;

# Monad is a functor that can flatten nested structures and create new ones.
protocol Monad 'M <: Functor 'M =
  flatMap 'A 'B : ('A -> 'M 'B) -> ('M 'A) -> ('M 'B)
  pure 'A : 'M 'A
;

# Apply is a Functor that can also apply a function
protocol Apply 'F <: Functor 'F =
  ap  'A 'B : ('F ('A -> 'B)) -> ('F 'A) -> ('F 'B)
;


# FlatMap is a Functor that also can flatten and map in one operation.
protocol FlatMap 'F <: Functor 'F =
  flatMap 'A 'B : ('A -> 'F 'B) -> 'F 'A -> 'F 'B
;

# Applicative is a Functor that also can lift a value and apply functions.
protocol Applicative 'F <: Apply 'F =
  pure 'A : 'F 'A
;

protocol Foldable 'F =
  foldLeft: 'A 'B : ('B -> 'A -> 'B) -> 'B -> 'F 'A -> 'B
  foldRight: 'A 'B : ('A -> 'B -> 'B) -> 'B -> 'F 'A -> 'B
;


# Int is a semigroup under addition.
instance Semigroup Int =
  fn combine x y = x + y
;

# Int is a monoid under addition.
instance Monoid Int =
  fn empty = 0
;

# Maybe is a functor.
instance Functor Maybe =
  fn map f maybe = maybe match
    | One x -> One (f x)
    | None   -> None
;

# Maybe is a monad.
instance Monad Maybe =
  fn flatMap f maybe = maybe match
    | One x -> f x
    | None   -> None
  fn pure 'A x = One x
;



# Maybe is an Apply.
instance Apply Maybe =
  fn ap f maybe =
    maybe match
      | One g   -> map g maybe
      | None    -> None
;

# Maybe is a FlatMap.
instance FlatMap Maybe =
  fn flatMap f maybe =
    maybe match
      | One x -> f x
      | None  -> None
;

# Maybe is an Applicative.
instance Applicative Maybe =
  fn pure x = One x
;

