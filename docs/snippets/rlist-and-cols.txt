enum Digit 'A =
  | One: 'A
  | Two: 'A, 'A
  | Three: 'A, 'A, 'A
  | Four: 'A, 'A, 'A, 'A

enum Tree 'A =
  | Leaf: 'A
  | Node: 'A, Tree ('A  'A), 'A

enum RList 'A =
  | Empty
  | Single: 'A
  | Deep: Digit 'A, RList (Tree ('A  'A)), Digit 'A

fn isEmpty (list: RList 'A): Bool =
  list match
    | Empty       -> true
    | _           -> false

fn digitToList (digit: Digit 'A): RList 'A =
  digit match
    | One a         -> Single a
    | Two a b       -> Deep (One a, Empty, One b)
    | Three a b c   -> Deep (Two a b, Empty, One c)
    | Four a b c d  -> Deep (Two a b, Empty, Two c d)

fn treeToList (tree: Tree ('A  'A)): RList 'A =
  tree match
    | Leaf a                -> Single a
    | Node a left, right  -> Deep (One a, treeToList left, One (snd right))

fn appendTree (tree: Tree ('A * 'A), list: RList (Tree ('A * 'A))): RList (Tree ('A * 'A)) =
  list match
    | Empty               -> Single tree
    | Single t            -> Deep (digitToList tree, Empty, digitToList t)
    | Deep (front, mid, rear) ->
        front match
          | One a          -> Deep (Two a tree, mid, rear)
          | Two a b        -> Deep (Three a b tree, mid, rear)
          | Three a b c    -> Deep (Four a b c tree, mid, rear)
          | Four a b c d   -> Deep (Two a b, appendTree (Node (c, d) (mid, tree), rear), digitToList d)

fn prependTree (tree: Tree ('A * 'A), list: RList (Tree ('A * 'A))): RList (Tree ('A * 'A)) =
  list match
    | Empty               -> Single tree
    | Single t            -> Deep (digitToList t, Empty, digitToList tree)
    | Deep (front, mid, rear) ->
        rear match
          | One d           -> Deep (front, mid, Two tree d)
          | Two c d         -> Deep (front, mid, Three tree c d)
          | Three b c d     -> Deep (front, mid, Four tree b c d)
          | Four a b c d    -> Deep (appendTree (Node (a, b) (tree, mid), front), mid, Two c d)

fn lookupTree (index: Int, tree: Tree ('A * 'A)): 'A =
  let rec lookupDigit (index: Int, digit: Digit 'A): 'A =
    digit match
      | One a       -> a
      | Two a b     -> if index == 0 then a else b
      | Three a b c -> index match
                         | 0 -> a
                         | 1 -> b
                         | 2 -> c
                         | _ ->


# collection protocols
protocol Sequence 'T <: Functor, Foldable =
  length: () -> Int
  get: Int -> Maybe 'T
  prepend: 'T -> Sequence 'T
  append: 'T -> Sequence 'T
  remove: Int -> Sequence 'T
  map: ('T -> 'U) -> Sequence 'U
  filter: ('T -> Boolean) -> Sequence 'T
  foldLeft: ('B -> 'T -> 'B) -> 'B -> 'B
  foldRight: ('T -> 'B -> 'B) -> 'B -> 'B
;

protocol Set 'T =
  size: () -> Int
  contains: 'T -> Boolean
  add: 'T -> Set 'T
  remove: 'T -> Set 'T
  union: Set 'T -> Set 'T
  intersection: Set 'T -> Set 'T
  difference: Set 'T -> Set 'T
;

protocol Map 'K 'V =
  size: () -> Int
  containsKey: 'K -> Boolean
  get: 'K -> Maybe 'V
  put: 'K -> 'V -> Map 'K 'V
  remove: 'K -> Map 'K 'V
  keys: () -> Sequence 'K
  values: () -> Sequence 'V
;

